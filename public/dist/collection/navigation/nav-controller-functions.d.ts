import { Animation, Config, FrameworkDelegate, Nav, NavOptions, Transition } from '../index';
import { ComponentDataPair, NavResult, TransitionInstruction } from './nav-interfaces';
import { ViewController } from './view-controller';
import { buildMdTransition } from './transitions/transition.md';
export declare function push(nav: Nav, delegate: FrameworkDelegate, animation: Animation, component: any, data?: any, opts?: NavOptions, done?: () => void): Promise<any>;
export declare function insert(nav: Nav, delegate: FrameworkDelegate, animation: Animation, insertIndex: number, page: any, params?: any, opts?: NavOptions, done?: () => void): Promise<any>;
export declare function insertPages(nav: Nav, delegate: FrameworkDelegate, animation: Animation, insertIndex: number, insertPages: any[], opts?: NavOptions, done?: () => void): Promise<any>;
export declare function pop(nav: Nav, delegate: FrameworkDelegate, animation: Animation, opts?: NavOptions, done?: () => void): Promise<any>;
export declare function popToRoot(nav: Nav, delegate: FrameworkDelegate, animation: Animation, opts?: NavOptions, done?: () => void): Promise<any>;
export declare function popTo(nav: Nav, delegate: FrameworkDelegate, animation: Animation, indexOrViewCtrl: any, opts?: NavOptions, done?: () => void): Promise<any>;
export declare function remove(nav: Nav, delegate: FrameworkDelegate, animation: Animation, startIndex: number, removeCount?: number, opts?: NavOptions, done?: () => void): Promise<any>;
export declare function removeView(nav: Nav, delegate: FrameworkDelegate, animation: Animation, viewController: ViewController, opts?: NavOptions, done?: () => void): Promise<any>;
export declare function setRoot(nav: Nav, delegate: FrameworkDelegate, animation: Animation, page: any, params?: any, opts?: NavOptions, done?: () => void): Promise<any>;
export declare function setPages(nav: Nav, delegate: FrameworkDelegate, animation: Animation, componentDataPars: ComponentDataPair[], opts?: NavOptions, done?: () => void): Promise<any>;
export declare function queueTransaction(ti: TransitionInstruction, done: () => void): Promise<boolean>;
export declare function nextTransaction(nav: Nav): Promise<any>;
export declare function successfullyTransitioned(result: NavResult, ti: TransitionInstruction): void;
export declare function transitionFailed(error: Error, ti: TransitionInstruction): void;
export declare function fireError(error: Error, ti: TransitionInstruction): void;
export declare function loadViewAndTransition(nav: Nav, enteringView: ViewController, leavingView: ViewController, ti: TransitionInstruction): Promise<{
    hasCompleted: boolean;
    requiresTransition: boolean;
}>;
export declare function executeAsyncTransition(nav: Nav, transition: Transition, enteringView: ViewController, leavingView: ViewController, delegate: FrameworkDelegate, opts: NavOptions, configShouldAnimate: boolean): Promise<NavResult>;
export declare function transitionFinish(nav: Nav, transition: Transition, delegate: FrameworkDelegate, opts: NavOptions): Promise<NavResult>;
export declare function cleanUpView(nav: Nav, delegate: FrameworkDelegate, activeViewController: ViewController): Promise<any>;
export declare function fireViewWillLifecycles(enteringView: ViewController, leavingView: ViewController): void;
export declare function attachViewToDom(nav: Nav, enteringView: ViewController, delegate: FrameworkDelegate): Promise<void>;
export declare function initializeViewBeforeTransition(nav: Nav, ti: TransitionInstruction): Promise<ViewController[]>;
export declare function updateNavStacks(enteringView: ViewController, leavingView: ViewController, ti: TransitionInstruction): Promise<any>;
export declare function destroyView(nav: Nav, delegate: FrameworkDelegate, viewController: ViewController): Promise<void>;
export declare function removeViewFromList(nav: Nav, viewController: ViewController): void;
export declare function insertViewIntoNav(nav: Nav, view: ViewController, index: number): void;
export declare function testIfViewsCanLeaveAndEnter(enteringView: ViewController, leavingView: ViewController, ti: TransitionInstruction): Promise<void>;
export declare function lifeCycleTest(viewController: ViewController, enterOrLeave: string): Promise<any>;
export declare function startTransaction(ti: TransitionInstruction): Promise<any>;
export declare function getEnteringView(ti: TransitionInstruction, nav: Nav, leavingView: ViewController): ViewController;
export declare function convertViewsToViewControllers(views: any[]): ViewController[];
export declare function convertComponentToViewController(nav: Nav, ti: TransitionInstruction): ViewController[];
export declare function addToQueue(ti: TransitionInstruction): void;
export declare function getQueue(id: number): TransitionInstruction[];
export declare function resetQueue(id: number): void;
export declare function getTopTransaction(id: number): TransitionInstruction;
export declare function getDefaultTransition(config: Config): typeof buildMdTransition;
